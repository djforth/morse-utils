{"version":3,"sources":["../src/checker.js"],"names":["checker","type","data","valid","document","getElementById","checks","el","keys","chKeys","dataset","Object","reduce","test","ch","v","k"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAMA,UAAU,SAAVA,OAAU,CAACC,IAAD,EAAOC,IAAP,EAAc;AAC5B,MAAIC,QAAQ,KAAZ;AACA,UAAQF,IAAR;AACE,SAAK,OAAL;AACEE,cAAQ,uBAAQD,IAAR,CAAR;AACA;AACF,SAAK,SAAL;AACEC,cAAQ,yBAAUD,IAAV,CAAR;AACA;AACF,SAAK,SAAL;AACEC,cAAQ,yBAAUC,SAASC,cAAT,CAAwBH,IAAxB,CAAV,CAAR;AACA;AACF,SAAK,QAAL;AACEC,cAAQ,wBAASD,IAAT,CAAR;AACA;AACF,SAAK,QAAL;AACEC,cAAQ,wBAASD,IAAT,CAAR;AACA;AACF;AACEC,cAAQ,KAAR;AAjBJ;;AAoBA,SAAOA,KAAP;AACD,CAvBD;;kBAyBe,UAACG,MAAD,EAAU;AACvB,SAAO,UAASC,EAAT,EAAY;AACjB,QAAIC,aAAJ;AAAA,QAAUL,cAAV;AAAA,QAAiBM,eAAjB;AACA,QAAI,CAACF,GAAGG,OAAR,EAAiB,OAAO,KAAP;AACjBF,WAAOG,OAAOH,IAAP,CAAYD,GAAGG,OAAf,CAAP;AACAD,aAASE,OAAOH,IAAP,CAAYF,MAAZ,CAAT;AACAH,YAAQM,OAAOG,MAAP,CAAc,UAACC,IAAD,EAAOC,EAAP,EAAY;AAChC,UAAI,CAACD,IAAL,EAAW,OAAO,KAAP;AACX,aAAO,wBAASL,IAAT,EAAeM,EAAf,CAAP;AACD,KAHO,EAGL,IAHK,CAAR;AAIA,QAAI,CAACX,KAAL,EAAY,OAAOA,KAAP;;AAEZ,yBAAMG,MAAN,EAAc,UAASS,CAAT,EAAYC,CAAZ,EAAc;AAC1Bb,cAAQH,QAAQe,CAAR,EAAWR,GAAGG,OAAH,CAAWM,CAAX,CAAX,CAAR;AACA,aAAOb,KAAP;AACD,KAHD;;AAKA,WAAOA,KAAP;AACD,GAjBD;AAkBD,C","file":"checker.js","sourcesContent":["import {\n  forIn\n  , includes\n  , isArray\n  , isBoolean\n  , isElement\n  , isNumber\n  , isString\n} from 'lodash';\n\nconst checker = (type, data)=>{\n  let valid = false;\n  switch (type){\n    case 'Array':\n      valid = isArray(data);\n      break;\n    case 'Boolean':\n      valid = isBoolean(data);\n      break;\n    case 'Element':\n      valid = isElement(document.getElementById(data));\n      break;\n    case 'Number':\n      valid = isNumber(data);\n      break;\n    case 'String':\n      valid = isString(data);\n      break;\n    default:\n      valid = false;\n  }\n\n  return valid;\n}\n\nexport default (checks)=>{\n  return function(el){\n    let keys, valid, chKeys;\n    if (!el.dataset) return false;\n    keys = Object.keys(el.dataset);\n    chKeys = Object.keys(checks);\n    valid = chKeys.reduce((test, ch)=>{\n      if (!test) return false;\n      return includes(keys, ch);\n    }, true);\n    if (!valid) return valid;\n\n    forIn(checks, function(v, k){\n      valid = checker(v, el.dataset[k]);\n      return valid;\n    });\n\n    return valid;\n  };\n};\n"]}